{"version":3,"sources":["utils/utilities.ts","components/Search/Search.tsx","components/Title/Title.tsx","components/Weather/Temperature.tsx","components/Weather/Details.tsx","components/Weather/Today.tsx","components/Weather/Forecast.tsx","components/DateTime/DateTime.tsx","components/News/Article.tsx","components/Alert/Alert.tsx","components/News/News.tsx","App.tsx","index.js"],"names":["convertTemperature","temp","unitsFrom","unitsTo","newTemp","Math","round","getRandomInt","min","max","ceil","floor","random","a","options","enableHighAccuracy","timeout","maximumAge","Promise","resolve","reject","navigator","permissions","query","name","then","result","state","geolocation","getCurrentPosition","position","error","Search","props","useState","city","setCity","className","id","onSubmit","event","preventDefault","onSearch","htmlFor","type","placeholder","onChange","target","value","Title","Output","Temperature","degrees","temperature","setTemperature","units","setUnits","swapTemperature","onUnitUpdate","LinkOutput","size","onClick","showUnits","SpanOutput","clickable","Details","description","humidity","wind","Today","switchUnits","useEffect","weather","src","icon","alt","main","speed","Forecast","apiKey","forecast","setForecast","didMount","useRef","current","coords","lat","lon","axios","get","response","fullData","data","daily","slice","summaryData","map","index","offset","Date","getTimezoneOffset","timestamp","dt","day","number","getDayAbbrev","getDay","minC","maxC","C","F","imageUrl","catch","console","log","getForecastForCity","useDidMountEffect","Object","keys","DateTime","timeData","setTimeData","timeObject","JSON","parse","request","splitTime","time_12","split","utc","timezone_offset","timeDataProcessed","date_time_txt","hours","minutes","meridiem","zoneName","timezone","replace","zoneUTC","getTimeForCity","Article","date","publishedAt","href","url","rel","title","getDate","getMonth","source","truncate","Alert","message","News","news","setNews","country","articles","getNewsForCity","item","App","setWeather","setCoords","tempRange","setTempRange","backgroundImage","setBackgroundImage","getWeatherForCity","roundedTemp","coord","alert","object","pages","images","entries","imageFile","length","imageHash","CryptoJS","MD5","toString","charAt","getImageForCity","getInitialLocation","handleGeolocation","latitude","longitude","style","searchedCity","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc15137c.chunk.js","sourcesContent":["/**\r\n * Utility function to convert a temperature between C and F\r\n * @param temp\r\n * @param unitsFrom\r\n * @param unitsTo\r\n * @returns {number}\r\n */\r\nexport function convertTemperature(temp: number, unitsFrom: string, unitsTo: string) {\r\n    let newTemp = temp;\r\n\r\n    if (unitsFrom === 'C' && unitsTo === 'F') {\r\n        newTemp = Math.round((temp * 1.8) + 32);\r\n    } else if (unitsFrom === 'F' && unitsTo === 'C') {\r\n        newTemp = Math.round((temp - 32) * 0.5556);\r\n    }\r\n\r\n    return newTemp;\r\n}\r\n\r\n/**\r\n * Utility function to convert the day number to its 3-letter abbreviation\r\n * @param number\r\n * @returns {string}\r\n */\r\nexport function getDayAbbrev(number: number) {\r\n    let day = '';\r\n    switch (number) {\r\n        case 0:\r\n            day = 'Sun';\r\n            break;\r\n        case 1:\r\n            day = 'Mon';\r\n            break;\r\n        case 2:\r\n            day = 'Tue';\r\n            break;\r\n        case 3:\r\n            day = 'Wed';\r\n            break;\r\n        case 4:\r\n            day = 'Thu';\r\n            break;\r\n        case 5:\r\n            day = 'Fri';\r\n            break;\r\n        case 6:\r\n            day = 'Sat';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return day;\r\n}\r\n\r\n/**\r\n * Utility function to get a random integer in a range\r\n * @param min\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function getRandomInt(min: number, max: number) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Function to prompt for geolocation to load initial data\r\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API\r\n * Ref: https://stackoverflow.com/a/45422800\r\n * Ref: https://stackoverflow.com/a/57829970\r\n */\r\nexport async function getInitialLocation() {\r\n    const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        navigator.permissions\r\n            .query({\r\n                name: \"geolocation\"\r\n            })\r\n            .then(function (result) {\r\n                if (result.state === \"granted\" || result.state === \"prompt\") {\r\n                    navigator.geolocation.getCurrentPosition(\r\n                        (position) => {\r\n                            resolve(position);\r\n                        },\r\n                        (error) => {\r\n                            reject(error);\r\n                        },\r\n                        options\r\n                    );\r\n                } else if (result.state === \"denied\") {\r\n                    return false;\r\n                }\r\n            });\r\n    });\r\n}","import React, {useState} from \"react\";\r\nimport \"./_Search.scss\";\r\n\r\nexport interface SearchProps {\r\n\tonSearch(city: string): void;\r\n}\r\n\r\nexport const Search: React.FC<SearchProps> = function(props: {\r\n\t\tonSearch(city: string): void;\r\n\t}) {\r\n\tconst [city, setCity] = useState('');\r\n\r\n    function handleSearch(event: { preventDefault: () => void; }) {\r\n        event.preventDefault();\r\n        props.onSearch(city); // sends city back to the parent component\r\n    }\r\n\r\n    function updateCity(event: React.ChangeEvent<HTMLInputElement>) {\r\n        setCity(event.target.value); // Updates state variable when input changes\r\n    }\r\n\r\n\treturn (\r\n\t\t<section className=\"row\">\r\n\t\t\t<form id=\"search-form\" className=\"search-form\" onSubmit={handleSearch}>\r\n\t\t\t\t<label htmlFor=\"search\" className=\"visually-hidden\">Search for a city</label>\r\n\t\t\t\t<input id=\"search\" type=\"search\" name=\"search\" placeholder=\"Search for a city\" onChange={updateCity}/>\r\n\t\t\t\t<button type=\"submit\">\r\n\t\t\t\t\t<span className=\"visually-hidden\">Search</span>\r\n\t\t\t\t\t<span className=\"material-icons\">search</span>\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default Search;","import React, {Fragment} from \"react\";\r\nimport \"./_Title.scss\";\r\n\r\nexport interface TitleProps {\r\n\tcity: string\r\n}\r\n\r\nexport const Title: React.FC<TitleProps> = function(\r\n\tprops: {\r\n\t\tcity: string\r\n\t}) {\r\n\r\n\t/**\r\n\t * Put output in a variable so it can be shown conditionally\r\n\t * (in the component's return statement)\r\n\t * Ref: https://stackoverflow.com/a/24534492\r\n\t * @returns {*}\r\n\t * @constructor\r\n\t */\r\n\tconst Output = () => (\r\n\t\t<h1 className=\"title row\">\r\n\t\t\tToday in <strong id=\"city-name\">{props.city}</strong>\r\n\t\t</h1>\r\n\t)\r\n\r\n\t/**\r\n\t * Output - only shown when props.city exists\r\n\t * Ref: https://stackoverflow.com/a/24534492\r\n\t */\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{props.city ? <Output/> : null}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default Title;","import React, {Fragment, useState} from \"react\";\r\nimport {convertTemperature} from \"../../utils/utilities\";\r\nimport \"./_Temperature.scss\";\r\n\r\nexport interface TemperatureProps {\r\n\tdegrees: number;\r\n\tunits: string;\r\n\tsize: string;\r\n\tshowUnits: boolean;\r\n\tclickable: boolean;\r\n\tonUnitUpdate: (unitsTo: string) => void;\r\n}\r\n\r\nexport const Temperature: React.FC<TemperatureProps> = function(\r\n\tprops: {\r\n\t\tdegrees: number;\r\n\t\tunits: string;\r\n\t\tsize: string;\r\n\t\tshowUnits: boolean;\r\n\t\tclickable: boolean;\r\n\t\tonUnitUpdate: (unitsTo: string) => void;\r\n\t}) {\r\n\r\n\t/**\r\n\t * STATE\r\n\t * temperature is a variable, to which we assign the current temp from props.degrees\r\n\t * setTemperature here creates a function which will receive the current temp here from props.degrees\r\n\t * Likewise for the units (C/F)\r\n\t */\r\n\tconst [temperature, setTemperature] = useState(props.degrees);\r\n\tconst [units, setUnits] = useState(props.units);\r\n\r\n\t/**\r\n\t * EVENTS\r\n\t * Function that is called when the link is clicked\r\n\t */\r\n\tfunction swapTemperature() {\r\n\t\tlet unitsTo = 'C';\r\n\t\tif (units === 'C') {\r\n\t\t\tunitsTo = 'F';\r\n\t\t}\r\n\t\tconst newTemp = convertTemperature(temperature, units, unitsTo);\r\n\t\tsetTemperature(newTemp);\r\n\t\tsetUnits(unitsTo);\r\n\r\n\t\t// Send the new unit setting up to the parent component\r\n\t\tprops.onUnitUpdate(unitsTo);\r\n\t}\r\n\r\n\t/**\r\n\t * Output when clickable = true\r\n\t * @returns {*}\r\n\t * @constructor\r\n\t */\r\n\tconst LinkOutput = () => (\r\n\t\t<a className={`temperature temperature--${props.size}`} onClick={swapTemperature}>\r\n\t\t\t<span className=\"temperature__amount\" data-temp-amount={temperature}>{temperature}&deg;</span>\r\n\t\t\t{props.showUnits === true &&\r\n\t\t\t\t<span className=\"temperature__units\" data-temp-units={units}>{units}</span>\r\n\t\t\t}\r\n\t\t</a>\r\n\t)\r\n\r\n\t/**\r\n\t * Output when clickable = false\r\n\t * @returns {*}\r\n\t * @constructor\r\n\t */\r\n\tconst SpanOutput = () => (\r\n\t\t<span className={`temperature temperature--${props.size}`}>\r\n\t\t\t<span className=\"temperature__amount\" data-temp-amount={temperature}>{temperature}&deg;</span>\r\n\t\t\t{props.showUnits === true &&\r\n\t\t\t<span className=\"temperature__units\" data-temp-units={units}>{units}</span>\r\n\t\t\t}\r\n\t\t</span>\r\n\t)\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{props.clickable ? <LinkOutput/> : <SpanOutput/>}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default Temperature;\r\n","import React from \"react\";\r\nimport \"./_Details.scss\";\r\n\r\nexport interface DetailsProps {\r\n\tdescription: string,\r\n\thumidity: number,\r\n\twind: number\r\n}\r\n\r\nexport const Details: React.FC<DetailsProps> = function(\r\n\tprops: {\r\n\t\tdescription: string,\r\n\t\thumidity: number,\r\n\t\twind: number\r\n\t}) {\r\n\r\n\treturn (\r\n\t\t<ul className=\"details\">\r\n\t\t\t<li className=\"details__item\"><span className=\"details__item__description\">{props.description}</span></li>\r\n\t\t\t<li className=\"details__item\">Humidity: <span className=\"details__humidity\">{props.humidity}</span>%</li>\r\n\t\t\t<li className=\"details__item\">Wind: <span className=\"details__wind\">{props.wind}</span>km/h</li>\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default Details;","import React, {Fragment, useEffect, useState, useRef} from \"react\";\r\nimport {convertTemperature} from \"../../utils/utilities\";\r\nimport Temperature from \"./Temperature\";\r\nimport Details from \"./Details\";\r\nimport \"./_Today.scss\";\r\n\r\nexport interface TodayProps {\r\n    weather: any|null,\r\n    temperature: number,\r\n    units: string;\r\n    onUnitUpdate(unitsTo: string): void;\r\n}\r\n\r\nexport const Today: React.FC<TodayProps> = function(props: { weather: any; temperature: number; units: string; onUnitUpdate(unitsTo: string): void; }) {\r\n    const [temperature, setTemperature] = useState(props.temperature); // Temperature needs to be stored separately from the weather object because it can be changed by the C/F conversion functionality\r\n    const [units, setUnits] = useState(props.units);\r\n\r\n    /**\r\n     * When the units prop is updated, set the state\r\n     * This ensures that when the units are reset to C in App, that flows through to today's Temperature component\r\n     */\r\n    useEffect(() => {\r\n        setUnits(props.units);\r\n    }, [props.units])\r\n\r\n    /**\r\n     * When the temperature prop is updated, set the state\r\n     */\r\n    useEffect(() => {\r\n        if(units === 'F') {\r\n            setTemperature(convertTemperature(props.temperature, 'C', 'F'));\r\n        }\r\n        else {\r\n            setTemperature(props.temperature);\r\n        }\r\n    }, [props.temperature, units])\r\n\r\n    /**\r\n     * What to do if the temperature component sends data up using the onUnitUpdate prop\r\n     * @param unitsTo\r\n     */\r\n    function switchUnits(unitsTo: string) {\r\n        // Update the state in this component\r\n        setUnits(unitsTo);\r\n\r\n        // Send the units it returns up to the parent component\r\n        props.onUnitUpdate(unitsTo);\r\n    }\r\n\r\n\r\n    /**\r\n     * Put output in a variable so it can be shown conditionally\r\n     * (in the component's return statement)\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     * @returns {*}\r\n     * @constructor\r\n     */\r\n    const Output = (): any => {\r\n        if(props.weather) {\r\n            return (\r\n                <section className=\"today row\">\r\n                    <div className=\"today__text\">\r\n                        <div className=\"today__text__temperature\">\r\n                            <div className=\"today__text__temperature__image-wrap\">\r\n                                <img src={`http://openweathermap.org/img/wn/${props.weather.weather[0].icon}@2x.png`}\r\n                                     alt={props.weather.weather[0].description}/>\r\n                            </div>\r\n                            <Temperature\r\n                                size=\"large\"\r\n                                degrees={temperature}\r\n                                units={units}\r\n                                showUnits={true}\r\n                                clickable={true}\r\n                                onUnitUpdate={switchUnits}\r\n                            />\r\n                        </div>\r\n                        <Details description={props.weather.weather[0].description}\r\n                                 humidity={props.weather.main.humidity}\r\n                                 wind={props.weather.wind.speed}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Output - only shown when weather exists\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     */\r\n    return (\r\n        <Fragment>\r\n            {props.weather ? <Output/> : null}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Today;","import React, {Fragment, useEffect, useState, useRef} from 'react';\r\nimport {convertTemperature, getDayAbbrev} from \"../../utils/utilities\";\r\nimport axios from \"axios\";\r\nimport Temperature from \"./Temperature\";\r\nimport \"./_Forecast.scss\";\r\n\r\nexport interface ForecastProps {\r\n    coords: {lat: number; lon: number;}|null;\r\n    units: React.SetStateAction<string>;\r\n}\r\n\r\nexport const Forecast: React.FC<ForecastProps> = function(props: { coords: {lat: number; lon: number;}|null; units: React.SetStateAction<string>; }) {\r\n    const apiKey = 'f4f65838c4d2f2b467cb557338c7cc7c';\r\n    const [forecast, setForecast] = useState({} as any); // https://basarat.gitbook.io/typescript/main-1/lazyobjectliteralinitialization\r\n    const [units, setUnits] = useState('C'); // See Temperature.tsx for notes about using state\r\n\r\n    /**\r\n     * Create and use useDidMountEffect hook with useRef\r\n     * for useEffect stuff that we do not want to run on first render\r\n     * Ref: https://thewebdev.info/2021/03/13/how-to-make-the-react-useeffect-hook-not-run-on-initial-render/\r\n     */\r\n    const useDidMountEffect = () => {\r\n        const didMount = useRef(false);\r\n\r\n        /**\r\n         * Update the forecast when the city changes\r\n         * This is done inside useEffect so it only re-runs if certain values have changed (in this case, props.coords)\r\n         */\r\n        useEffect(() => {\r\n            if (didMount.current) {\r\n                if(props.coords) {\r\n                    getForecastForCity(props.coords);\r\n                }\r\n                setUnits(props.units)\r\n            } else {\r\n                didMount.current = true;\r\n            }\r\n        }, [props.coords]);\r\n    }\r\n    useDidMountEffect();\r\n\r\n    /**\r\n     * When units change, set state\r\n     */\r\n    useEffect(() => {\r\n        setUnits(props.units)\r\n    }, [props.units]);\r\n\r\n    /**\r\n     * Set and perform API query to get the forecast for a given city\r\n     * and save it in the state variable\r\n     * Note: Forecast query requires coordinates, not city name\r\n     * @param coords\r\n     */\r\n    function getForecastForCity(coords: {lat: number; lon:number;}) {\r\n        const query = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&appid=${apiKey}&units=metric&exclude=current,hourly,minutely,alerts`;\r\n\r\n        axios.get(query)\r\n            // Update component state when an API response is received\r\n            // Catch and log error if there is one\r\n            .then(response => {\r\n\r\n                // Slice the returned data down to only the first five days\r\n                let fullData = response.data.daily;\r\n                fullData = fullData.slice(1, 6);\r\n\r\n                // Loop through the returned data and put just what we want into an object\r\n                const summaryData: { [key: string]: any } = {};\r\n                {\r\n                    fullData.map((value: { dt: any; temp: { min: number; max: number; }; weather: { icon: any; }[]; }, index: any) => {\r\n                        // Get current timezone offset\r\n                        const today = new Date();\r\n                        const offset = today.getTimezoneOffset();\r\n\r\n                        // Get the forecast day's unix timestamp from the returned data\r\n                        const timestamp = value.dt;\r\n\r\n                        // Get the day of that timestamp taking the timezone offset into account\r\n                        const date = new Date((timestamp * 1000) + (offset * 60 * 1000));\r\n                        const dayNo = date.getDay();\r\n                        const day = getDayAbbrev(dayNo);\r\n\r\n                        // Add this forecast day's data to the summary\r\n                        const minC = Math.round(value.temp.min);\r\n                        const maxC = Math.round(value.temp.max);\r\n                        summaryData[day] = {\r\n                            C: {\r\n                                min: minC,\r\n                                max: maxC\r\n                            },\r\n                            F: {\r\n                                min: convertTemperature(minC, 'C', 'F'),\r\n                                max: convertTemperature(maxC, 'C', 'F'),\r\n                            },\r\n                            imageUrl: `http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`\r\n                        }\r\n                    })\r\n                }\r\n\r\n                // Update the forecast state variable with our customised data object\r\n                setForecast(summaryData);\r\n\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * What to do if the temperature component sends data up using the onUnitUpdate prop\r\n     * @param unitsTo\r\n     */\r\n    function switchUnits(unitsTo: string) {\r\n        // Update the state in this component\r\n        setUnits(unitsTo);\r\n    }\r\n\r\n    /**\r\n     * Put output in a variable so it can be shown conditionally\r\n     * (in the component's return statement)\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     * Can't use Fragment here for some reason...?\r\n     * @returns {*}\r\n     * @constructor\r\n     */\r\n    const Output = () => {\r\n        return <section className=\"forecast row\">\r\n            { /** Loop through the forecast items and add each one to the page */}\r\n            {Object.keys(forecast).map(day => (\r\n                <div className=\"forecast__item\" key={day}>\r\n                    <span className=\"forecast__item__day\">{day}</span>\r\n                    <img className=\"forecast__item__image\" src={forecast[day].imageUrl} alt=\"\"/>\r\n                    <span className=\"forecast__item__min\">\r\n\t\t\t\t\t\tLow\r\n\t\t\t\t\t\t<Temperature\r\n                            size=\"small\"\r\n                            degrees={forecast[day][units].min}\r\n                            units={units}\r\n                            showUnits={false}\r\n                            clickable={false}\r\n                            onUnitUpdate={switchUnits}/>\r\n\t\t\t\t\t</span>\r\n                    <span className=\"forecast__item__max\">\r\n\t\t\t\t\t\tHigh\r\n\t\t\t\t\t\t<Temperature\r\n                            size=\"small\"\r\n                            degrees={forecast[day][units].max}\r\n                            units={units}\r\n                            showUnits={false}\r\n                            clickable={false}\r\n                            onUnitUpdate={switchUnits}/>\r\n\t\t\t\t\t</span>\r\n                </div>\r\n            ))}\r\n        </section>;\r\n    }\r\n\r\n    /**\r\n     * Output - only shown when forecast exists\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     */\r\n    return (\r\n        <Fragment>\r\n            {forecast ? <Output/> : null}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Forecast;\r\n","import React, {Fragment, useEffect, useState, useRef} from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./_DateTime.scss\";\r\n\r\nexport interface DateTimeProps {\r\n    coords: {lat: number, lon: number}|null;\r\n}\r\n\r\nexport const DateTime: React.FC<DateTimeProps> = function (\r\n    props: {\r\n        coords: {lat: number, lon: number}|null;\r\n    }) {\r\n    const [timeData, setTimeData] = useState<Record<string, any>|null>(null);\r\n\r\n    /**\r\n     * Create and use useDidMountEffect hook with useRef\r\n     * for useEffect stuff that we do not want to run on first render\r\n     * Ref: https://thewebdev.info/2021/03/13/how-to-make-the-react-useeffect-hook-not-run-on-initial-render/\r\n     */\r\n    const useDidMountEffect = () => {\r\n        const didMount = useRef(false);\r\n\r\n        useEffect(() => {\r\n            if (didMount.current) {\r\n                if(props.coords) {\r\n                    getTimeForCity(props.coords);\r\n                }\r\n            } else {\r\n                didMount.current = true;\r\n            }\r\n        }, [props.coords]);\r\n    }\r\n    useDidMountEffect();\r\n\r\n    /**\r\n     * Get time information from IPGeolocation API for a given set of lat/long coordinates\r\n     * @param coords\r\n     */\r\n    function getTimeForCity(coords: { lat: number; lon: number; }) {\r\n        const query = `https://api.ipgeolocation.io/timezone?apiKey=ff944d6f7e6449e4804af70e245bbabd&lat=${coords.lat}&long=${coords.lon}`;\r\n\r\n        axios.get(query)\r\n            // Update component state when an API response is received\r\n            // Catch and log error if there is one\r\n            .then(response => {\r\n                // This API returns a plain string not a JSON object, so we shall parse it to make it one\r\n                const timeObject = JSON.parse(response.request.response);\r\n\r\n                // Do some processing\r\n                const splitTime = (timeObject.time_12).split(/[: ]/);\r\n                let utc = `+${timeObject.timezone_offset}`;\r\n                if (timeObject.timezone_offset < 0) {\r\n                    utc = timeObject.timezone_offset;\r\n                }\r\n                const timeDataProcessed = {\r\n                    day: (timeObject.date_time_txt).split(',')[0],\r\n                    hours: splitTime[0],\r\n                    minutes: splitTime[1],\r\n                    meridiem: splitTime[3],\r\n                    zoneName: (timeObject.timezone).replace('_', ' '),\r\n                    zoneUTC: utc\r\n                }\r\n\r\n                // Save the processed data to the state\r\n                setTimeData(timeDataProcessed);\r\n\r\n            }).catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Put output in a variable so it can be shown conditionally\r\n     * (in the component's return statement)\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     * @returns {*}\r\n     * @constructor\r\n     */\r\n    const Output = (): any => {\r\n        if(timeData) {\r\n            return (\r\n                <section className=\"datetime row\">\r\n                <span className=\"datetime__time\">\r\n                    <span className=\"material-icons-outlined\">alarm</span>\r\n                    {timeData.day} {timeData.hours}:{timeData.minutes} {timeData.meridiem}\r\n                </span>\r\n                    <span className=\"datetime__zone\">\r\n                    {timeData.zoneName} (GMT{timeData.zoneUTC})\r\n                </span>\r\n                </section>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Output - only shown when time data exists\r\n     * Ref: https://stackoverflow.com/a/24534492\r\n     */\r\n    return (\r\n        <Fragment>\r\n            {timeData ? <Output/> : null}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DateTime;","import React, {useState} from \"react\";\r\nimport truncate from \"truncate\"\r\nimport \"./_Article.scss\";\r\n\r\nexport interface ArticleProps {\r\n    data: any\r\n}\r\n\r\nexport const Article: React.FC<ArticleProps> = function(\r\n    props: {\r\n        data: any\r\n    }) {\r\n    const date = new Date(props.data.publishedAt);\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n    /**\r\n     * Output\r\n     */\r\n    return (\r\n        <article className=\"article\">\r\n            <a className=\"article__inner\" href={props.data.url} target=\"_blank\" rel=\"noreferrer\">\r\n                <h2 className=\"article__inner__title\">{props.data.title}</h2>\r\n                <p className=\"article__inner__source\">\r\n                    <span>{date.getDate()} {months[date.getMonth()]}</span>\r\n                    <span>{props.data.source.name}</span>\r\n                </p>\r\n                <div className=\"article__inner__copy\">\r\n                    <p>{truncate(props.data.description, 80)}</p>\r\n                </div>\r\n            </a>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Article;","import React, {Fragment} from \"react\";\r\nimport \"./_Alert.scss\";\r\n\r\nexport interface AlertProps {\r\n    type: string;\r\n    message: string\r\n}\r\n\r\nexport const Alert: React.FC<AlertProps> = function(\r\n    props: {\r\n        type: string;\r\n        message: string;\r\n    }) {\r\n\r\n    return (\r\n        <div className={`alert alert--${props.type}`}>\r\n            <p>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import React, {Fragment, useEffect, useState, useRef} from \"react\";\r\nimport axios from \"axios\";\r\nimport Article from \"./Article\"\r\nimport Alert from \"../Alert/Alert\"\r\n\r\nexport interface NewsProps {\r\n\tcity: string,\r\n\tcountry: string\r\n}\r\n\r\nexport const News: React.FC<NewsProps> = function(\r\n\tprops: {\r\n\t\tcity: string,\r\n\t\tcountry: string\r\n\t}) {\r\n\tconst didMount = useRef(false);\r\n\tconst [news, setNews] = useState([]);\r\n\r\n\t/**\r\n\t * Create and use useDidMountEffect hook with useRef\r\n\t * for useEffect stuff that we do not want to run on first render\r\n\t * Ref: https://thewebdev.info/2021/03/13/how-to-make-the-react-useeffect-hook-not-run-on-initial-render/\r\n\t */\r\n\tconst useDidMountEffect = () => {\r\n\t\t\r\n\t\tuseEffect(() => {\r\n\t\t\tif (didMount.current) {\r\n\t\t\t\tgetNewsForCity(props.city, props.country);\r\n\t\t\t} else {\r\n\t\t\t\tdidMount.current = true;\r\n\t\t\t}\r\n\t\t}, [props.city]);\r\n\t}\r\n\tuseDidMountEffect();\r\n\r\n\t/**\r\n\t * Get time information from MediaStack API for a given city\r\n\t * @param city\r\n\t * @param country\r\n\t */\r\n\tfunction getNewsForCity(city: string, country: string) {\r\n\t\tconst apiKey = 'b4824ef81779b5b36a81816125585feb';\r\n\t\tconst query = `https://gnews.io/api/v4/search?q=${city}&country=${country}&lang=en&token=${apiKey}`;\r\n\r\n\t\taxios.get(query)\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst articles = response.data.articles;\r\n\t\t\t\tsetNews(articles.slice(0,3));\r\n\t\t\t}).catch(error => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tsetNews([]);\r\n\t\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Put output in a variable so it can be shown conditionally\r\n\t * (in the component's return statement)\r\n\t * Ref: https://stackoverflow.com/a/24534492\r\n\t * @returns {*}\r\n\t * @constructor\r\n\t */\r\n\tconst Output = () => (\r\n\t\t<aside id=\"news\">\r\n\t\t\t{ /** Loop through the news items and add each one to the page */}\r\n\t\t\t{news.map((item, index) => (\r\n\t\t\t\t<Article key={index} data={item}/>\r\n\t\t\t))}\r\n\t\t</aside>\r\n\t)\r\n\r\n\t/**\r\n\t * Output\r\n\t * Ref: https://stackoverflow.com/a/24534492\r\n\t */\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{news ? <Output/> : null}\r\n\t\t\t{!news && didMount.current ? <Alert type=\"error\" message=\"There was a problem fetching news.\"/> : null}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default News;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {getRandomInt, getInitialLocation} from \"./utils/utilities\";\r\n\r\nimport axios from \"axios\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport Search from \"./components/Search/Search\";\r\nimport Title from \"./components/Title/Title\";\r\nimport Today from \"./components/Weather/Today\";\r\nimport Forecast from \"./components/Weather/Forecast\";\r\nimport DateTime from \"./components/DateTime/DateTime\";\r\nimport News from \"./components/News/News\";\r\nimport \"./_variables.scss\";\r\nimport \"./_utilities.scss\";\r\nimport \"./_App.scss\";\r\n\r\n\r\nexport default function App() {\r\n    const apiKey = 'f4f65838c4d2f2b467cb557338c7cc7c';\r\n    const [weather, setWeather] = useState<Record<string, any>|null>(null);\r\n    const [city, setCity] = useState('');\r\n    const [country, setCountry] = useState('');\r\n    const [coords, setCoords] = useState<{ lat: number, lon: number } | null>(null);\r\n    const [tempRange, setTempRange] = useState('');\r\n    const [temperature, setTemperature] = useState(0);\r\n    const [units, setUnits] = useState('C');\r\n    const [backgroundImage, setBackgroundImage] = useState('');\r\n\r\n    /**\r\n     * When a city is searched for, get the weather from the API using the search string for the city\r\n     * and set the state so child components can pick it up\r\n     * Ref: https://www.geeksforgeeks.org/how-to-pass-data-from-one-component-to-other-component-in-reactjs/\r\n     */\r\n    function handleSearch(searchedCity: string) {\r\n        // Set coords to null so previous ones aren't retained\r\n        setCoords(null);\r\n\r\n        // Get the weather for the searched city\r\n        getWeatherForCity(searchedCity);\r\n\r\n        // Reset the temperature units back to the default\r\n        setUnits('C');\r\n    }\r\n\r\n    /**\r\n     * When location data is received from browser geolocation,\r\n     * get the weather from the API using the coordinates\r\n     */\r\n    function handleGeolocation(coords: {lat: number, lon: number}) {\r\n\r\n        // Get the weather for the searched city\r\n        getWeatherForCity(coords);\r\n\r\n        // Reset the temperature units back to the default\r\n        setUnits('C');\r\n    }\r\n\r\n    /**\r\n     * The Today component sends up the temperature unit setting when it changes so it can be used by other components\r\n     * Here we update the state variables used by those components when new data is received\r\n     * @param units\r\n     */\r\n    function handleUnitChange(units: React.SetStateAction<string>) {\r\n        setUnits(units);\r\n    }\r\n\r\n    /**\r\n     * Set and perform API query to get the weather for a given city\r\n     * and save it in the state variable\r\n     * @param city\r\n     */\r\n    function getWeatherForCity(city: string|{lat: number, lon: number}) {\r\n        let query = null;\r\n        if(typeof city === 'object') {\r\n            query = `https://api.openweathermap.org/data/2.5/weather?lat=${city.lat}&lon=${city.lon}&appid=${apiKey}&units=metric`;\r\n        }\r\n        else {\r\n            query = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\r\n        }\r\n\r\n        if(query) {\r\n            axios.get(query)\r\n                // Update component state when an API response is received\r\n                // Catch and log error if there is one\r\n                .then(response => {\r\n                    // Full weather object\r\n                    setWeather(response.data);\r\n\r\n                    // Rounded temperature\r\n                    const roundedTemp = Math.round(response.data.main.temp);\r\n                    setTemperature(roundedTemp);\r\n\r\n                    // Use the returned city name, not the searched phrase\r\n                    setCity(response.data.name);\r\n\r\n                    // Only set the coords if they aren't already set (i.e. by geolocation)\r\n                    if(!coords) {\r\n                        setCoords(response.data.coord);\r\n                    }\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    alert('Sorry, couldn\\'t find that city. Please try again');\r\n                })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Query Wikimedia Commons for an image of a given city\r\n     * @param city\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    async function getImageForCity(city: string) {\r\n        const query = `https://commons.wikimedia.org/w/api.php?action=query&prop=images&imlimit=500&redirects=1&titles=${city}&origin=*&format=json`;\r\n        let imageUrl = '';\r\n\r\n        /**\r\n         * Set and perform API query to get images from Wikimedia for the city\r\n         * See Today.tsx for more notes about queries in useEffect hook\r\n         */\r\n        return axios.get(query)\r\n            .then(response => {\r\n                // The key that the images are under varies for each city,\r\n                // so dig down to the right object and use Object.entries to find the images so that the city key doesn't matter\r\n                const object: Record<string, any> = response.data.query.pages;\r\n                const images = Object.entries(object)[0][1].images; // returns a list of file paths\r\n\r\n                if (images) {\r\n                    // Choose a random one from the returned list and adjust the text string to what we need\r\n                    const randomIndex = getRandomInt(0, images.length);\r\n                    const imageFile = (images[randomIndex].title)\r\n                        .replace('File:', '')\r\n                        .replace(/ /g, '_');\r\n\r\n                    // Build the URL from the file information\r\n                    // Ref: https://stackoverflow.com/a/33691240\r\n                    const imageHash = CryptoJS.MD5(imageFile).toString();\r\n                    imageUrl = `https://upload.wikimedia.org/wikipedia/commons/${imageHash.charAt(0)}/${imageHash.charAt(0)}${imageHash.charAt(1)}/${imageFile}`;\r\n                } else {\r\n                    console.log(`No image found for ${city}`);\r\n                }\r\n\r\n                // Return imageUrl - URL if one was found, empty if nothing found for this city\r\n                return imageUrl;\r\n\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Create and use useDidMountEffect hook with useRef\r\n     * for useEffect stuff that we do not want to run on first render\r\n     * Ref: https://thewebdev.info/2021/03/13/how-to-make-the-react-useeffect-hook-not-run-on-initial-render/\r\n     */\r\n    const useDidMountEffect = () => {\r\n        const didMount = useRef(false);\r\n\r\n        useEffect(() => {\r\n            // Second and subsequent renders: Get and show new background image when the city changes\r\n            if (didMount.current) {\r\n                getImageForCity(city).then(response => {\r\n                    const imageUrl: any = response;\r\n                    setBackgroundImage(imageUrl);\r\n                });\r\n\r\n                if(temperature <= 15) {\r\n                    setTempRange('cold');\r\n                }\r\n                else if(temperature > 15 && temperature < 25 ) {\r\n                    setTempRange('fair');\r\n                }\r\n                else if((temperature >= 25) && (temperature < 35)) {\r\n                    setTempRange('warm');\r\n                }\r\n                else {\r\n                    setTempRange('hot');\r\n                }\r\n            }\r\n            // First render: Prompt for geolocation and search accordingly\r\n            else {\r\n                getInitialLocation()\r\n                    .then((position: any) => {\r\n                        handleGeolocation({lat: position.coords.latitude, lon: position.coords.longitude});\r\n                    })\r\n                    .catch((error) => {\r\n                        alert(`There was a problem getting your location, please search instead`);\r\n                        console.log(error);\r\n                    });\r\n\r\n                // Set ref so this doesn't run on second/subsequent renders\r\n                didMount.current = true;\r\n\r\n                // Note: This will then re-render because the city will be set (hence triggering this hook again)\r\n                // and will do the \"second and subsequent render\" step\r\n            }\r\n        }, [city, coords]);\r\n    }\r\n    useDidMountEffect();\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\" data-temp-range={tempRange} style={{backgroundImage: `url(${backgroundImage})`}}>\r\n            <main className=\"app\">\r\n                <div className=\"app__top\">\r\n                    <Search onSearch={handleSearch}/>\r\n                </div>\r\n                <div className=\"app__main\">\r\n                    <Title city={city}/>\r\n                    <DateTime coords={coords}/>\r\n                    <Today weather={weather} temperature={temperature} units={units} onUnitUpdate={handleUnitChange}/>\r\n                    <Forecast coords={coords} units={units}/>\r\n                </div>\r\n                <div className=\"app__side\">\r\n                    <News country={country} city={city}/>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App/>\r\n\t</React.StrictMode>,\r\n\trootElement\r\n);\r\n"],"sourceRoot":""}